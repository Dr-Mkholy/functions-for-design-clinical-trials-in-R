Designing and analyzing clinical trials in R

-----   -----
***   ***
filter(!is.na(column)) #filter rows for no missing values only
ifelse( logical code, 'yes, it is greater than 10%', 'no, it doesnot match') #create a binary variable response to split data based on a certain percentage
t.test( gp1 ~ gp2, var.equal=TRUE, data= data) #to perform a t-test, var.equal means variance and sd are equal, for normally distributed data

wilcox.test( gp1 ~ gp2,  data= data) #to perform a t-test, var.equal means variance and sd are equa
compareGroup(gp1 ~ gp2, data=data) #compare two groups, non parametric distributions

createTable(data, show.ratio = FALSE, show.p.overall=TRUE) #to create a table, check documents for arguments. 

# library(blockrand) #Use block randomization to produce lists of length 100 and random block sizes between 2 and 8.
set.seed(123)
under55 <- blockrand(n=100, num.levels = 2, block.sizes = c(1,2,3,4), id.prefix='U55', block.prefix='U55',stratum='<55y')

# library(epitools) #Calculate the odds ratio of effect of glutamine on infection
oddsratio.wald(fact.data$glutamine, fact.data$infection)

# library (dplyr, magritter) , Calculate the two-sided 90% confidence interval for the difference
prop.test(table(relapse.trial$Treatment, relapse.trial$Relapse), 
          alternative = "two.sided", conf.level=0.9, correct=FALSE)

#caluculate the t max in pharmacikinetic
pk.calc.tmax(conc, time, options = list(), first.tmax = NULL, check = TRUE)

#caluculate the area under curve
pk.calc.auc(conc, time, interval= , method=  ..., options = list())

#calculate how many patients are needed for sample size? #if we define n then this will reflect the power of the sample size based on n
power.t.test(n = NULL, delta = NULL, sd = 1, sig.level = 0.05,
             power = NULL,
             type = c("two.sample", "one.sample", "paired"),
             alternative = c("two.sided", "one.sided"),
             strict = FALSE, tol = .Machine$double.eps^0.25)


#computes sample size for paired and unpaired t-tests
n.ttest(power = 0.8, alpha = 0.05, mean.diff = 0.8, sd1 = 0.83, sd2 = sd1, k = 1, design = "unpaired", fraction = "balanced", variance = "equal")

#Power Calculations for Two-Sample Test for Proportions
ower.prop.test(n = NULL, p1 = NULL, p2 = NULL, sig.level = 0.05,
                power = NULL,
                alternative = c("two.sided", "one.sided"),
                strict = FALSE, tol = .Machine$double.eps^0.25)

#if intrim analysis is designed
Pocock.ss <- gsDesign(k=4, test.type=2, sfu="Pocock", n.fix=500, beta=0.1)

#Power analysis for TOST for difference between two proportions using Z-test (pooled) using toster package 
powerTOSTtwo.prop(
  alpha,
  statistical_power,
  prop1,
  prop2,
  N,
  low_eqbound_prop,
  high_eqbound_prop
)

#Power analysis for TOST for independent t-test (raw scores), it works for continious measurement using sd
powerTOSTtwo.raw(
  alpha,
  statistical_power,
  N,
  sdpooled,
  low_eqbound,
  high_eqbound,
  delta = 0
)

#reorder the level of factor, This is useful for contr.treatment contrasts which take the first level as the reference
relevel(x, ref, …)

#carry out linear regression 
lm(formula, data, subset, weights, na.action,
   method = "qr", model = TRUE, x = FALSE, y = FALSE, qr = TRUE,
   singular.ok = TRUE, contrasts = NULL, offset, …)

#model prediction 
predict (object, …)

#subset from a vector or matrix or dataframe 
subset(x, subset, select, drop = FALSE, …)

#generalized fitting model, specified by giving a symbolic description of the linear predictor and a description of the error distribution.
glm(formula, family = gaussian, data, weights, subset,
    na.action, start = NULL, etastart, mustart, offset,
    control = list(…), model = TRUE, method = "glm.fit",
    x = FALSE, y = TRUE, singular.ok = TRUE, contrasts = NULL, …)

#extract model coefficients
coefficients(object, …)

#compute CI for one or more model
confint(object, parm, level = 0.95, …)

#


***   ***
-----   -----
